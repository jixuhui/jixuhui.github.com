<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS Code Signing | Renew Brilliance Blog]]></title>
  <link href="http://jixuhui.github.com/blog/categories/ios-code-signing/atom.xml" rel="self"/>
  <link href="http://jixuhui.github.com/"/>
  <updated>2014-05-19T19:04:07+08:00</updated>
  <id>http://jixuhui.github.com/</id>
  <author>
    <name><![CDATA[Hubbert Ji]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Signing 原理深究]]></title>
    <link href="http://jixuhui.github.com/blog/2014/05/19/code-singingyuan-li-shen-jiu/"/>
    <updated>2014-05-19T17:44:13+08:00</updated>
    <id>http://jixuhui.github.com/blog/2014/05/19/code-singingyuan-li-shen-jiu</id>
    <content type="html"><![CDATA[<h2>理解之前需要了解 Cryptographic Services （加密服务）</h2>

<p><a href="https://developer.apple.com/library/ios/documentation/Security/Conceptual/Security_Overview/CryptographicServices/CryptographicServices.html#//apple_ref/doc/uid/TP30000976-CH3-SW1%E8%AF%A5%E6%96%87%E7%AB%A0%E4%B8%BB%E8%A6%81%E4%BB%8B%E7%BB%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%8A%A0%E5%AF%86%E6%96%B9%E6%A1%88%EF%BC%9A">https://developer.apple.com/library/ios/documentation/Security/Conceptual/Security_Overview/CryptographicServices/CryptographicServices.html#//apple_ref/doc/uid/TP30000976-CH3-SW1%E8%AF%A5%E6%96%87%E7%AB%A0%E4%B8%BB%E8%A6%81%E4%BB%8B%E7%BB%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%8A%A0%E5%AF%86%E6%96%B9%E6%A1%88%EF%BC%9A</a></p>

<ol>
<li>对称加密 【sender和receiver是一个密钥，速度快，但是传递密钥存在安全隐患，需要建立独立的安全通道】</li>
<li>非对称加密 【公钥、私钥，公钥加密则私钥解密 and versa vice，保证了安全性，公钥发送不需要特殊的安全通道，此方案可以做为传递对称加密密钥的方案，速度较对称加密慢】</li>
<li>极速加密</li>
<li>散列hash加密</li>
</ol>


<h2>而后，应该是苹果早期的sdk文档介绍code signing：【主要介绍关于certificate】</h2>

<p><a href="http://blog.sina.com.cn/s/blog_45d0b2cb0100n7sq.html">http://blog.sina.com.cn/s/blog_45d0b2cb0100n7sq.html</a> 需要通读全文，方有深入理解</p>

<ol>
<li>完成apple id注册和申请developer后</li>
<li>Certificate Signing Request （CSR），在进行请求后即将公钥传送给apple服务器，而后生成一个.cer文件【有公钥签名的】和一个私钥，这个公钥签名的.cer文件和该私钥统一叫做数字身份或者签名身份【digital identity or signing identity】</li>
<li>以后无论申请还是签名你开发的application都是用这个siging identity</li>
<li>Copying a Signing Identity To Another Computer，你从网上下载的signing certificate只是有公钥，没有私钥，所以完成不了application签名，
Instead, use the Export Items menu item in the File menu of Keychain Access to export both the certificate and private key as a Personal Information Exchange (.p12) file
and copy that file to the second computer. Double-click the file to install the certificate and key in the keychain.</li>
</ol>


<h2>About Code Signing</h2>

<p>主要是一张图:<a href="https://developer.apple.com/library/ios/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005929-CH1-SW1">https://developer.apple.com/library/ios/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005929-CH1-SW1</a></p>

<ol>
<li>通过理解第二大部分的内容，这个图基本理解，图中有散列哈希后生成的message digest【摘要信息】，对它用私钥进行加密生成digital signature</li>
<li>最后，Data + signing certificate + digital signature = code-signed data</li>
</ol>

]]></content>
  </entry>
  
</feed>
